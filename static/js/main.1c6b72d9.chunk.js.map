{"version":3,"sources":["Constants.tsx","Piece.tsx","Tile.tsx","util/gameLogic.tsx","util/dumbAI.tsx","hooks/useBoard.tsx","Board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ItemTypes","Piece","player","king","canDrag","AISelected","hasJump","index","move","size","color","iconSize","outerStyle","display","alignItems","justifyContent","width","height","borderRadius","backgroundColor","boxShadow","innerStyle","kingStyle","fontSize","length","useDrag","item","type","end","monitor","dropResult","getDropResult","toIndex","drag","data-testid","style","ref","className","Tile","black","piece","AIMoveTo","useDrop","accept","drop","canDrop","getItem","includes","collect","TileStyle","indexToCoordinates","Math","floor","coordinatesToIndex","x","y","withinBounds","isTileEmpty","state","tiles","canJump","direction","newIndex","undefined","hasEnemyPiece","canMove","directions","moveDirections","i","adjX","adjY","push","jumpIndex","updateBoard","jumping","newTilesState","map","tile","newPieceState","handleJumping","dragIndex","playerTurn","forEach","Object","keys","canDragIndex","newTileState","newDrag","handleMovement","movePiece","fromIndex","newBoardState","temp","handleCapture","checkKing","mid","getMidIndex","numPieceOne","numPieceTwo","getRandMove","candidates","randCan","random","choosenPiece","possibleMoves","showMove","from","to","newTiles","newPiece","initialState","pieceExist","id","uuid","winner","useBoard","init","useState","boardState","setBoardState","handleAI","setTimeout","AIShowMove","AIMakeMove","newState","boardStyle","flexWrap","Board","boardRef","useRef","setSize","useEffect","resizeBoard","window","innerHeight","innerWidth","min","side","current","setProperty","addEventListener","removeEventListener","key","appStyle","App","appHeight","document","documentElement","DndProvider","backend","MultiBackend","options","HTML5toTouch","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1c6b72d9.chunk.js","sourcesContent":["export const ItemTypes = {\n    PIECE: 'piece'\n}","import React from 'react';\nimport {ItemTypes} from './Constants';\nimport {useDrag} from 'react-dnd';\n\nexport interface PieceClass{\n    player: 1 | 2\n    king: boolean\n    canDrag: number[]\n    hasJump: boolean\n    AISelected: boolean\n}\n\ninterface PieceProps extends PieceClass{\n    index: number\n    move: Function\n    size: number\n}\n\nconst Piece: React.FC<PieceProps> = ({player, king, canDrag, hasJump, AISelected, index, move, size}) => {\n\n    //styling\n    const color = player === 1 ? ['rgb(183, 28, 28)','rgb(229, 57, 53)'] : ['rgb(33, 33, 33)','rgb(66, 66, 66)'];\n    const iconSize = `${size/21}px`\n    \n    let outerStyle : React.CSSProperties = {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: '80%',\n        height: '80%',\n        borderRadius: '100px',\n        backgroundColor: color[0],\n        boxShadow: '3px 3px 3px 1px #424242'\n    }\n\n    const innerStyle: React.CSSProperties = {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        width:'79%',\n        height:'79%',\n        borderRadius: '100px',\n        backgroundColor: color[1]\n    }\n\n    const kingStyle: React.CSSProperties = {\n        color: color[0],\n        fontSize: iconSize\n    }\n\n    const highlight = (canDrag.length > 0 && player === 1) || AISelected;\n    if(highlight) outerStyle = {...outerStyle, backgroundColor:'rgb(255, 238, 88)'}\n\n    //drag and drop logic\n    const [, drag] = useDrag({\n        item: {type: ItemTypes.PIECE, canDrag: canDrag},\n        end: (item,monitor) => {\n            const dropResult = monitor.getDropResult();\n            if(item && dropResult){\n                move(index, dropResult.toIndex);\n            }\n        }\n    });\n\n    \n    return (\n        <div data-testid='piece-outer' style={outerStyle} ref={canDrag.length > 0 && player === 1 ? drag : null} >\n            <div data-testid='piece-inner' style={innerStyle}>\n                {king ? <i data-testid='piece-king' className=\"fas fa-crown\" style={kingStyle}></i> : ''}\n            </div>\n        </div>\n    )\n};\n\nexport default Piece;","import React from 'react';\nimport Piece from './Piece';\nimport {PieceClass} from './Piece';\nimport {ItemTypes} from './Constants';\nimport {useDrop} from 'react-dnd'\n\nexport interface TileClass {\n    id?: string \n    index: number\n    black : boolean\n    piece: PieceClass | null\n    AIMoveTo: boolean\n}\n\ninterface TileProps extends TileClass {\n    move: Function\n    size: number\n}\n\nconst Tile: React.FC<TileProps> = ({index, black, piece, AIMoveTo, move, size}) => {\n    //drag and drop logic\n    const [{canDrop},drop] = useDrop({\n        accept: ItemTypes.PIECE,\n        drop: () => ({toIndex: index}),\n        canDrop: (item,monitor) => {\n            return monitor.getItem().canDrag.includes(index)\n        },\n        collect: monitor => ({\n            canDrop: !!monitor.canDrop()\n        })\n    })\n\n    //styling\n    const tileColor = black ? 'rgb(117, 117, 117)' : 'rgb(238, 238, 238)';\n    const statusColor = canDrop || AIMoveTo ? '#5c6bc0': tileColor;\n    const TileStyle: React.CSSProperties = {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: '12.5%',\n        height: '12.5%',\n        backgroundColor: statusColor\n    }\n\n    return (\n        <div data-testid='tile' style={TileStyle} ref={drop}>\n            {piece ? <Piece player={piece.player} canDrag={piece.canDrag} hasJump={piece.hasJump}\n                        king={piece.king} AISelected={piece.AISelected} index={index} move={move} size={size}  /> : ''}\n        </div>\n    )\n};\n\nexport default Tile;\n","import {GameState} from '../hooks/useBoard';\nimport {TileClass} from '../Tile';\n\n// convert index to x,y coordinates\nexport const indexToCoordinates = (index: number) => {\n    const x = index % 8;\n    const y = Math.floor(index/8);\n    return [x, y];\n}\n\n// convert x,y coordinates to index\nexport const coordinatesToIndex =  (x: number, y: number) => {\n    if(x < 0 || x > 7 || y < 0 || y > 7) return undefined;\n    return x + (y*8);\n}\n\n// get the mid point between two indices\nexport const getMidIndex = (fromIndex: number, toIndex:number) => {\n    const mid = (fromIndex + toIndex) / 2;\n    return mid;\n}\n\n// check if index is within bounds\nexport const withinBounds = (index:number) => {\n    if(index >= 0 && index < 64){\n        return true;\n    } else {\n        return false;\n    }\n};\n\n// movement directions for different checker pieces\nexport const moveDirections = (player:1|2, king:boolean) => {\n    if(king){\n        return [[-1,-1],[1,-1],[1,1],[-1,1]];\n    } else {\n        return player === 1 ? [[-1,-1],[1,-1]] : [[1,1],[-1,1]];\n    }\n};\n\n// check if tile has a piece\nexport const isTileEmpty = (index:number, state:GameState) => {\n    return withinBounds(index) && state.tiles[index].piece ? false : true;\n};\n\n// check if tile has an enemy piece\nexport const hasEnemyPiece = (index:number, player:number, state: GameState) => {\n    if(!withinBounds(index)) return false;\n\n    const piece = state.tiles[index].piece;\n    return piece && piece.player !== player;\n};\n\n// check if a piece can jump over the piece at the following index\nexport const canJump = (index:number, player:number, direction:number[], state: GameState) => {\n    const [x,y] = indexToCoordinates(index);\n    const newIndex = coordinatesToIndex(x + direction[0], y + direction[1]);\n\n    if(newIndex === undefined) return false;\n    return hasEnemyPiece(index,player,state) && isTileEmpty(newIndex,state);\n}\n\n// check if piece can move\nexport const canMove = (index:number, state:GameState) => {\n    const piece = state.tiles[index].piece;\n    // if no piece return early\n    if(!piece) return [[],[]];\n\n    const player = piece.player;\n    const king = piece.king;\n\n    let directions = moveDirections(player, king);\n    const [x,y] = indexToCoordinates(index);\n\n    let canDrag:number[] = [];\n    let hasJump:number[] = [];\n\n    //check each direction of that the piece can move\n    for(let i = 0; i < directions.length; i++){\n        const adjX = directions[i][0], adjY = directions[i][1];\n        const newIndex = coordinatesToIndex(x + adjX, y + adjY);\n\n        if(newIndex === undefined) continue;\n\n        // if the index is empty, the piece can move\n        if(isTileEmpty(newIndex,state)){\n            canDrag.push(newIndex);\n        }\n        // check if the piece has a valid jump in that direction\n        else if (canJump(newIndex,player,directions[i], state)){\n            const jumpIndex = coordinatesToIndex(x + (adjX * 2), y + (adjY * 2));\n            if(jumpIndex !== undefined) hasJump.push(jumpIndex);\n        } \n    }\n\n    return [canDrag, hasJump];\n};\n\nexport const handleJumping = (state:GameState) => {\n    const newTilesState:TileClass[] = state.tiles.map(tile => {\n        if(tile.index === state.jumping && tile.piece){\n            const [ ,hasJump] = canMove(tile.index, state);\n            const newPieceState = {...tile.piece, canDrag: hasJump};\n            return {...tile, piece: newPieceState};\n        } \n        else if (tile.piece) {\n            const newPieceState = {...tile.piece, canDrag: []}\n            return {...tile, piece: newPieceState};\n        }\n        else {\n            return tile;\n        }\n    })\n\n    return {...state, tiles:newTilesState};\n}\n\nexport const handleMovement = (state:GameState):GameState => {\n    const dragIndex = {};\n    const jumpIndex = {};\n\n    const tiles = state.tiles;\n    const playerTurn = state.playerTurn;\n\n    tiles.forEach( (tile) => {\n        if(tile.piece && tile.piece.player === playerTurn){\n            const [canDrag, hasJump] = canMove(tile.index, state);\n            if(canDrag.length > 0) dragIndex[tile.index] = canDrag;\n            if(hasJump.length > 0) jumpIndex[tile.index] = hasJump;\n        }\n    });\n\n    const hasJump = Object.keys(jumpIndex).length > 0; \n    const canDragIndex = hasJump ? jumpIndex : dragIndex;\n\n    const newTileState:TileClass[] = tiles.map( (tile,index) => {\n        if(tile.piece){\n            const newDrag = canDragIndex[index] ? canDragIndex[index] : [];\n            const newPieceState = {...tile.piece, canDrag: newDrag, hasJump: hasJump}\n            \n            return {...tile, piece: newPieceState}\n        } else {\n            return tile;\n        } \n    });\n\n    return {...state, tiles:newTileState};\n};\n\nexport const updateBoard = (state:GameState):GameState => {\n    const newState = state.jumping !== null ? handleJumping(state) : handleMovement(state);\n    return newState;\n};\n\nexport const movePiece = (fromIndex:number, toIndex:number, state:GameState):GameState => {\n    const canDrag = state.tiles[fromIndex].piece?.canDrag;\n    const hasJump = state.tiles[fromIndex].piece?.hasJump;\n\n    if(canDrag && canDrag.includes(toIndex)){\n        let newBoardState:GameState = {...state};\n        let temp = newBoardState.tiles[toIndex].piece;\n        newBoardState.tiles[toIndex].piece = newBoardState.tiles[fromIndex].piece;\n        newBoardState.tiles[fromIndex].piece = temp;\n\n        if(hasJump){\n            handleCapture(fromIndex, toIndex, newBoardState);\n            const currPiece = newBoardState.tiles[toIndex].piece;\n            \n            if(currPiece){\n                const [,hasJump] = canMove(toIndex, newBoardState);\n                newBoardState.jumping = hasJump.length > 0 ? toIndex : null;\n            }\n        }\n\n        checkKing(toIndex, newBoardState);\n        if(newBoardState.jumping === null) newBoardState.playerTurn = newBoardState.playerTurn === 1 ? 2 : 1;\n        return updateBoard(newBoardState);\n    }\n\n    return updateBoard(state);\n};\n\nexport const handleCapture = (fromIndex:number, toIndex:number, state:GameState) => {\n    const mid = getMidIndex(fromIndex, toIndex);\n\n    if(!mid) return;\n\n    const piece = state.tiles[mid].piece;\n\n    if(!piece) return;\n\n    if(piece.player === 1){\n        state.numPieceOne--;\n    } else {\n        state.numPieceTwo--;\n    }\n\n    state.tiles[mid].piece = null;\n};\n\nexport const checkKing = (index:number, state:GameState) => {\n    const piece = state.tiles[index].piece;\n\n    if(!piece) return;\n\n    if(piece.player === 1 && index < 8){\n        piece.king = true;\n    }\n\n    if(piece.player === 2 && index >= 56){\n        piece.king = true;\n    }\n};","import {GameState} from '../hooks/useBoard';\n\nexport const getRandMove = (state:GameState):[number,number] => {\n    //index of tiles that has a piece that can be moved\n    const candidates: number[] = [];\n\n    // search board for candidates\n    state.tiles.forEach(tile => {\n        if(tile.piece && tile.piece.player === 2 && tile.piece.canDrag.length > 0){\n            candidates.push(tile.index);\n        }\n    });\n\n    // chooses a random candidate\n    if(candidates.length === 0) return [-1,-1];\n    const randCan = Math.floor(Math.random() * candidates.length);\n    const fromIndex = candidates[randCan];\n\n    //check if piece exists\n    const choosenPiece = state.tiles[fromIndex].piece;\n    if(!choosenPiece) return [-1,-1];\n\n    //choose a random move from the candidate\n    const possibleMoves = choosenPiece.canDrag;\n    const randMove = Math.floor(Math.random() * possibleMoves.length);\n    const toIndex = possibleMoves[randMove];\n\n    return [fromIndex, toIndex];\n};\n\n// returns new state with highlighted piece and tile\nexport const showMove = (from:number, to:number, state:GameState) => {\n    const newTiles = state.tiles.map( tile => {\n        if(tile.index === from && tile.piece){\n            const newPiece = {...tile.piece, AISelected:true};\n            return {...tile, piece:newPiece};\n        } \n        else if (tile.index === to){\n            return {...tile, AIMoveTo: true};\n        } else {\n            return tile;\n        }\n    });\n\n    return {...state, tiles:newTiles} \n};","import {useState} from 'react';\nimport {TileClass} from '../Tile';\nimport {PieceClass} from '../Piece';\nimport {updateBoard, indexToCoordinates, movePiece} from '../util/gameLogic';\nimport {getRandMove, showMove} from '../util/dumbAI';\nimport {v4 as uuid} from 'uuid';\n\nexport interface GameState{\n    playerTurn: 1 | 2\n    winner: 1 | 2 | false\n    tiles: TileClass[]\n    numPieceOne: number\n    numPieceTwo: number\n    jumping: number | null\n}\n\nexport const initialState = () => {\n    const tiles: TileClass[] = [];\n\n    for(let i = 0; i < 64; i++){\n        const [x,y] = indexToCoordinates(i);\n        const piece = pieceExist(x,y);\n        tiles.push({id: uuid(), \n                    index:i, \n                    black: (x + y) % 2 === 1, \n                    piece: piece, \n                    AIMoveTo:false\n                   })\n    }\n\n    const state : GameState = {\n                               playerTurn:1, \n                               winner: false, \n                               tiles: tiles,\n                               numPieceOne: 12,\n                               numPieceTwo: 12,\n                               jumping: null\n                              }\n\n    return updateBoard(state);\n\n    function pieceExist(x:number,y:number): PieceClass | null {\n        const piece:PieceClass = {\n                                  player: 1, \n                                  king: false, \n                                  canDrag:[], \n                                  hasJump:false,\n                                  AISelected:false\n                                 }\n\n        if(y <= 2 && (x+y) % 2 === 1){\n            return {...piece, player: 2};\n        } \n        else if(y >= 5 && (x+y) % 2 === 1){\n            return piece;\n        }\n        else {\n            return null;\n        }\n    }\n}\n\nconst useBoard = (init = initialState()):[GameState, Function] => {\n    const [boardState, setBoardState] = useState(init);\n\n    //handle AI's turn\n    const handleAI = (state:GameState) => {\n        setTimeout(()=> {\n            AIShowMove(state);\n        }, 300);\n    };\n\n    //makes move for AI\n    const AIMakeMove = (from:number, to: number, state:GameState) => {\n        const newState = movePiece(from, to, state);\n        newState.tiles[to].AIMoveTo = false;\n        \n        const piece = newState.tiles[to].piece\n        if (piece) piece.AISelected = false;\n\n        setBoardState(newState);\n        if(newState.playerTurn === 2) handleAI(newState);\n    };\n\n    //update state to show AI's move\n    const AIShowMove = (state:GameState) => {\n        const [from, to] = getRandMove(state);\n        if(from === -1 || to === -1) return;\n\n        const newState = showMove(from, to, state);\n        setBoardState(newState);\n        setTimeout(()=>{\n            AIMakeMove(from, to, newState);\n        }, 500)\n    };\n\n    const move:Function = (from:number, to:number) => {\n        const newState = movePiece(from, to, boardState);\n        setBoardState(newState);\n\n        if(newState.playerTurn === 2) handleAI(newState);\n    };\n\n    return [boardState, move];\n}\n\nexport default useBoard;","import React, {useEffect, useRef, useState} from 'react';\nimport Tile from './Tile';\nimport useBoard from './hooks/useBoard';\n\nconst boardStyle : React.CSSProperties = {\n    display: 'flex',\n    flexWrap: 'wrap'\n}\n\nconst Board: React.FC = () => {\n    const boardRef = useRef<HTMLDivElement>(null);\n    const [size, setSize] = useState(0);\n\n    //logic to keep 1:1 aspect ratio of board\n    useEffect(()=>{\n        const resizeBoard = () => {\n            const height = window.innerHeight;\n            const width = window.innerWidth;\n            const min = Math.min(height,width);\n            const side = `${min}px`;\n\n            if(boardRef && boardRef.current){\n                boardRef.current.style.setProperty('height', side);\n                boardRef.current.style.setProperty('width', side);\n            }\n            setSize(min);\n        }\n\n        resizeBoard();\n        window.addEventListener('resize', resizeBoard);\n\n        return () => window.removeEventListener('resize', resizeBoard);\n    }, []);\n\n    const [boardState, move] = useBoard();\n\n    return(\n        <div data-testid='board' ref={boardRef} style={boardStyle}>\n            {boardState.tiles.map( tile  => <Tile key={tile.id} index={tile.index} black={tile.black} move={move}\n                                                    AIMoveTo={tile.AIMoveTo} piece={tile.piece} size={size} />)}\n        </div>\n    )\n};\n\nexport default Board;\n","import React,{useEffect} from 'react';\nimport Board from './Board';\nimport MultiBackend from 'react-dnd-multi-backend';\nimport HTML5toTouch from 'react-dnd-multi-backend/dist/esm/HTML5toTouch'; \nimport {DndProvider} from 'react-dnd';\n\nconst appStyle : React.CSSProperties = {\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  height: 'var(--app-height)',\n  width: '100vw'\n}\n\nconst App : React.FC = () => {\n  useEffect(()=>{\n    const appHeight = () => document.documentElement.style.setProperty('--app-height', `${window.innerHeight}px`);\n    window.addEventListener('resize', appHeight);\n    appHeight();\n\n    return () => window.removeEventListener('resize', appHeight);\n  }, []);\n\n  return (\n    <div style={appStyle}>\n      <DndProvider backend={MultiBackend} options={HTML5toTouch}>\n        <Board />\n      </DndProvider>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}